import unittest
import re


def add(numbers):
    if not numbers:
        return 0
    # handle different delimiters
    delimiter = ","
    if numbers.startswith("//"):
        match = re.match(r"//(\[.+?\]|\W)\n(.+)", numbers)
        if match:
            delimiter = re.findall(r"\[(.+?)\]", match.group(1))
            if delimiter:
                delimiter = "[" + "|".join(map(re.escape, delimiter)) + "]"
            else:
                delimiter = re.escape(match.group(1))
            numbers = match.group(2)
    # split by delimiter or newline
    nums = re.split(delimiter + "|\n", numbers)
    result = 0
    negatives = []
    for num in nums:
        if num.isdigit():
            n = int(num)
            if n < 0:
                negatives.append(n)
            elif n <= 1000:
                result += n
    if negatives:
        raise ValueError("negatives not allowed: {}".format(negatives))
    return result


class TestStringCalculator(unittest.TestCase):

    def test_empty_string(self):
        self.assertEqual(add(""), 0)

    def test_single_number(self):
        self.assertEqual(add("1"), 1)

    def test_two_numbers(self):
        self.assertEqual(add("1,2"), 3)

    def test_unknown_amount_of_numbers(self):
        self.assertEqual(add("1,2,3,4,5"), 15)

    def test_new_lines_between_numbers(self):
        self.assertEqual(add("1\n2,3"), 6)

    def test_different_delimiter(self):
        self.assertEqual(add("//;\n1;2"), 3)
        self.assertEqual(add("//+\n1+2+3"), 6)
        self.assertEqual(add("//[***]\n1***2***3"), 6)
        self.assertEqual(add("//[*][%]\n1*2%3"), 6)
        self.assertEqual(add("//[]\n1,2,3"), 6)

    def test_negative_numbers(self):
        with self.assertRaises(ValueError) as cm:
            add("-1,2,-3")
        self.assertEqual(str(cm.exception), "negatives not allowed: [-1, -3]")

    def test_numbers_bigger_than_1000(self):
        self.assertEqual(add("2,1001"), 2)

    def test_delimiters_longer_than_one_char(self):
        self.assertEqual(add("//[***]\n1***2***3"), 6)
        self.assertEqual(add("//[**][%%]\n1**2%%3"), 6)


if __name__ == '__main__':
    unittest.main()
